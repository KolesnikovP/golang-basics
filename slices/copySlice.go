package main

import "fmt"

/*
Допустим, в вашей функции происходят изменения элементов, но вы не хотите затронуть входной слайс.
В языке есть встроенная функция func copy(dst, src []Type) int,
которая копирует слайс src в слайс dst и возвращает кол-во скопированных элементов:
*/

func main() {
	nums := []int{1, 2, 3, 4, 5}

	numsCp := make([]int, len(nums))
	// Is important to initiate slice the same length
	copy(numsCp, nums)
	fmt.Println(numsCp) // [1,2,3,4,5]

	/*
		Почему мы не можем просто перезаписать слайс в другую переменную и изменять ее? Как и с функциями,
		при присваивании слайса к переменной, копируется только длина и вместимость, но массив передается по ссылке:
	*/
	nums1 := []int{1, 2, 3, 4, 5}

	numsCp1 := nums

	// исходный слайс nums тоже будет изменен
	numsCp1[0] = 10

	fmt.Println(nums1) // [10,2,3,4,5]
	/*
		Существует распространенная ошибка, когда пытаются скопировать слайсы различной длины.
		В этом случае элементы, выходящие за рамки слайса dst, не будут скопированы
	*/
}
